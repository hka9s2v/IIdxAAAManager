// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  email        String?  @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  displayName  String?  @map("display_name") @db.VarChar(100)
  avatarUrl    String?  @map("avatar_url") @db.VarChar(500)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // リレーション
  userScores UserScore[]

  @@map("users")
}

// 楽曲マスターモデル
model Song {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  difficulty String   @db.VarChar(20) // HYPER, ANOTHER, LEGGENDARIA
  level      Int
  notes      Int?
  bpm        String?  @db.VarChar(50)
  wr         Int?     @map("world_record") // World Record score
  avg        Int?     @map("average_score") // Average score
  coef       Decimal? @db.Decimal(6, 4) // 譜面係数p
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // リレーション
  userScores UserScore[]

  @@unique([title, difficulty])
  @@map("songs")
}

// ユーザースコアモデル
model UserScore {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  songId     Int      @map("song_id")
  grade      String   @db.VarChar(10) // AAA, AA, A, B, C, D, E, F
  score      Int?
  bpi        Decimal? @db.Decimal(7, 3) // BPI値（小数点以下3桁）
  clearLamp  String?  @map("clear_lamp") @db.VarChar(20) // EASY, NORMAL, HARD, EX-HARD, FULL-COMBO, PERFECT
  playCount  Int      @default(1) @map("play_count")
  bestScore  Int?     @map("best_score")
  achievedAt DateTime @default(now()) @map("achieved_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // リレーション
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@map("user_scores")
}
